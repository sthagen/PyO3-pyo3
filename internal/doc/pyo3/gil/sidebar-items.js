window.SIDEBAR_ITEMS = {"constant":[["GIL_COUNT","This is an internal counter in pyo3 monitoring whether this thread has the GIL."],["OWNED_OBJECTS","Temporarily hold objects that will be released when the GILPool drops."]],"fn":[["decrement_gil_count","Decrements pyo3’s internal GIL count - to be called whenever GILPool or GILGuard is dropped."],["ensure_gil","Ensures the GIL is held, used in the implementation of `Python::with_gil`."],["ensure_gil_unchecked","Ensures the GIL is held, without interpreter state checking."],["gil_is_acquired","Checks whether the GIL is acquired."],["increment_gil_count","Increments pyo3’s internal GIL count - to be called whenever GILPool or GILGuard is created."],["prepare_freethreaded_python","Prepares the use of Python in a free-threaded context."],["register_decref","Registers a Python object pointer inside the release pool, to have its reference count decreased the next time the GIL is acquired in pyo3."],["register_incref","Registers a Python object pointer inside the release pool, to have its reference count increased the next time the GIL is acquired in pyo3."],["register_owned","Registers an owned object inside the GILPool, to be released when the GILPool drops."],["with_embedded_python_interpreter","Executes the provided closure with an embedded Python interpreter."]],"static":[["POOL",""],["START",""]],"struct":[["EnsureGIL","Struct used internally which avoids acquiring the GIL where it’s not necessary."],["GILGuard","RAII type that represents the Global Interpreter Lock acquisition."],["GILPool","A RAII pool which PyO3 uses to store owned Python references."],["ReferencePool","Thread-safe storage for objects which were inc_ref / dec_ref while the GIL was not held."]],"type":[["PyObjVec",""]]};