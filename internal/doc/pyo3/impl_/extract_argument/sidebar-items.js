initSidebarItems({"fn":[["argument_extraction_error","Adds the argument name to the error message of an error which occurred during argument extraction."],["extract_argument","The standard implementation of how PyO3 extracts a `#[pyfunction]` or `#[pymethod]` function argument."],["extract_argument_with_default","Alternative to [`extract_argument`] used when the argument has a default value provided by an annotation."],["extract_optional_argument","Alternative to [`extract_argument`] used for `Option<T>` arguments (because they are implicitly treated as optional if at the end of the positional parameters)."],["from_py_with","Alternative to [`extract_argument`] used when the argument has a `#[pyo3(from_py_with)]` annotation."],["from_py_with_with_default","Alternative to [`extract_argument`] used when the argument has a `#[pyo3(from_py_with)]` annotation and also a default value."],["push_parameter_list",""],["unwrap_required_argument","Unwraps the Option<&PyAny> produced by the FunctionDescription `extract_arguments_` methods. They check if required methods are all provided."]],"struct":[["DictVarkeywords","Marker struct which indicates unknown keywords should be collected into a `PyDict`."],["FunctionDescription","Function argument specification for a `#[pyfunction]` or `#[pymethod]`."],["KeywordOnlyParameterDescription",""],["NoVarargs","Marker struct which indicates varargs are not allowed."],["NoVarkeywords","Marker struct which indicates unknown keywords are not permitted."],["TupleVarargs","Marker struct which indicates varargs should be collected into a `PyTuple`."]],"trait":[["VarargsHandler","A trait used to control whether to accept varargs in FunctionDescription::extract_argument_(method) functions."],["VarkeywordsHandler","A trait used to control whether to accept unrecognised keywords in FunctionDescription::extract_argument_(method) functions."]]});